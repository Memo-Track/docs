{"0": {
    "doc": "Admin Workflow",
    "title": "Admin Functionalities",
    "content": ". ",
    "url": "/usermanual/admin.html#admin-functionalities",
    
    "relUrl": "/usermanual/admin.html#admin-functionalities"
  },"1": {
    "doc": "Admin Workflow",
    "title": "Login as Admin",
    "content": " ",
    "url": "/usermanual/admin.html#login-as-admin",
    
    "relUrl": "/usermanual/admin.html#login-as-admin"
  },"2": {
    "doc": "Admin Workflow",
    "title": "Login",
    "content": "1. Open the App . 2. Enter the Phone number . 3. Enter the password . 4. Click on Sign in button to log in . 5. Click on Dashboard,to check the login correctly . ",
    "url": "/usermanual/admin.html#login",
    
    "relUrl": "/usermanual/admin.html#login"
  },"3": {
    "doc": "Admin Workflow",
    "title": "Logout",
    "content": "1. Click on highlight button on the left corner side to logout . 2. After Logout . ) . ",
    "url": "/usermanual/admin.html#logout",
    
    "relUrl": "/usermanual/admin.html#logout"
  },"4": {
    "doc": "Admin Workflow",
    "title": "Set password",
    "content": "1. Click on set a password? button to set the new password . 2. Enter the Phone number to set the new password . 3. Type password . 4. Again type the same password below to confirm the password . 5. Click on Set Password, to set the new password for that phone number . 6. After click the set password button, you can see the password confirmation message like this . ",
    "url": "/usermanual/admin.html#set-password",
    
    "relUrl": "/usermanual/admin.html#set-password"
  },"5": {
    "doc": "Admin Workflow",
    "title": "Create Role",
    "content": "1. Click on Add Role . 2. Enter the Role name . 3. Enter the description, if you want to add something with the role . 4. Choose the Permission for the role . 5. Click on Create, to add the role . ",
    "url": "/usermanual/admin.html#create-role",
    
    "relUrl": "/usermanual/admin.html#create-role"
  },"6": {
    "doc": "Admin Workflow",
    "title": "Create User",
    "content": ". 1. Click on Add User . 2. Enter the Institutional ID . 3. Select the Role . 4. Enter the Unique Phone number to add with the user . 5. Click on Create, to add the user . ",
    "url": "/usermanual/admin.html#create-user",
    
    "relUrl": "/usermanual/admin.html#create-user"
  },"7": {
    "doc": "Admin Workflow",
    "title": "Create Block",
    "content": ". 1. Click on Add Block . 2. Enter the Block Name . 3. Enter the number of Floors in the given Block . 4. If you want to add something with the block, enter the content in the description . 5. Click on Create, the Block will be Created . ",
    "url": "/usermanual/admin.html#create-block",
    
    "relUrl": "/usermanual/admin.html#create-block"
  },"8": {
    "doc": "Admin Workflow",
    "title": "Create Ward",
    "content": ". 1. Click on Manage Wards for the block you want to add ward . 2. Enter the Ward Name . 3. Enter the number of Floors in that ward . 4. Click on Add Ward, to add the ward . ",
    "url": "/usermanual/admin.html#create-ward",
    
    "relUrl": "/usermanual/admin.html#create-ward"
  },"9": {
    "doc": "Admin Workflow",
    "title": "Create or Update Approval Hierarchy",
    "content": ". 1. Click on Add Hierarchie . 2. Click on Add Level, how many levels you want to proceed . 3. Select the role you want to set in the approver level 1 . 4. Select the role you want to set in the level 2, and so on aet the role to the levels for how many you add the levels . 5. Click on Create Hierarchy . 6. Click on highlight, to edit the hierarchy levls . 7. After you changes the hierarchy, Click on Update Hierarchy to update the hierarchy . ",
    "url": "/usermanual/admin.html#create-or-update-approval-hierarchy",
    
    "relUrl": "/usermanual/admin.html#create-or-update-approval-hierarchy"
  },"10": {
    "doc": "Admin Workflow",
    "title": "Admin Workflow",
    "content": " ",
    "url": "/usermanual/admin.html",
    
    "relUrl": "/usermanual/admin.html"
  },"11": {
    "doc": "Approver Workflow",
    "title": "Approver Workflow",
    "content": " ",
    "url": "/usermanual/approver.html",
    
    "relUrl": "/usermanual/approver.html"
  },"12": {
    "doc": "Approver Workflow",
    "title": "Login as Approver",
    "content": "1. Open the memopage, you see the memos under Under Review . 2. Click the Reviewed, to see the reviewed memos . 3. Click the Completed, to see the completed memos . ",
    "url": "/usermanual/approver.html#login-as-approver",
    
    "relUrl": "/usermanual/approver.html#login-as-approver"
  },"13": {
    "doc": "Approver Workflow",
    "title": "Approve and Reject the Approval",
    "content": "1. Select the memo to approve . 2.Click the approve button to approve the memo . 3.Click the undo approval to reject the memo . 4. After reject the approval . ",
    "url": "/usermanual/approver.html#approve-and-reject-the-approval",
    
    "relUrl": "/usermanual/approver.html#approve-and-reject-the-approval"
  },"14": {
    "doc": "Backend Docs",
    "title": "Backend Docs",
    "content": "The backend directory houses the core Django application for MemoTrack-SAAS, designed for various hospitals. It includes several Django apps, configuration files, and static content. Here’s a breakdown of each file and its purpose: . | manage.py: . | This is Django’s command-line utility for administrative tasks. | It sets the default port for the runserver command to 30000. | It ensures the DJANGO_SETTINGS_MODULE environment variable is set to core.settings before executing commands. | . | requirements.txt: This is a binary file, which would typically list the Python dependencies required for the backend application. | . backend/accounts/ . This Django app handles user accounts, roles, and hospital management. | __init__.py: An empty file that signifies the accounts directory is a Python package. | admin.py: . | Configures Django Admin to display User and Hospital models. | HospitalAdmin: Controls the queryset for hospitals in the admin panel; superusers can see all hospitals, while other users only see hospitals they are associated with. | UserAdmin: Controls the queryset for users; superusers see all users, while other users only see users belonging to their hospital. | . | apps.py: . | Defines the AccountsConfig for the accounts app. | It sets default_auto_field to django.db.models.BigAutoField. | The ready method ensures that signal handlers defined in accounts.signals are imported and registered when the app is ready. | . | auth_backends.py: An empty file, which could be used for custom authentication backends. | fcm_service.py: . | Handles Firebase Cloud Messaging (FCM) functionalities. | Initialisation: It initialises the Firebase Admin SDK using a service account key located at memo-track-firebase-adminsdk-fbsvc-060fb4e2e6.json. | send_fcm_to_user(token, title, body, data): Sends a single FCM notification to a specific device token. | send_fcm_to_users(tokens, title, body, data): Sends FCM notifications to a list of device tokens, returning success/failure counts and a list of failed tokens. | memo_created_notification(info, memoId): Sends a notification when a new memo is created, targeting approvers and responders based on current block and tagged role, respectively. | memo_tagged_notification(info, tagged_role_name, tagged_role_id, memoId): Sends a notification when a memo is tagged to a specific role. | . | memo-track-firebase-adminsdk-fbsvc-060fb4e2e6.json: . | This JSON file contains the Firebase service account credentials for the “memo-track” project. | It includes the project ID (memo-track), private key ID, the private key itself, client email, client ID, and various Google API URLs for authentication and token exchange. | . | models.py: . | Role: . | Defines user roles within a Hospital. | Fields include name, description, is_protected (prevents deletion), is_approver, is_responder, and is_creator. | Roles are unique by name and hospital. | . | Hospital: . | Represents a hospital entity. | Fields include name, address, geolocation_point (as latitude, longitude), radius (in meters), created_at, updated_at. | It tracks geolocation_changes when the geolocation_point is updated. | . | UserManager: A custom manager for the User model, used for creating regular users and superusers. | create_user: Creates a user with institution_id, role, phone_number, and hospital. Automatically sets is_staff=True if the role is ‘ADMIN’. | create_superuser: Creates a superuser, setting is_staff=True and is_superuser=True. | . | User: . | A custom user model based on Django’s AbstractBaseUser and PermissionsMixin. | Key fields include institution_id (display ID unique within a hospital), hospital, role, phone_number (unique and validated with a regex for Indian phone numbers), current_block, current_ward, fcm_token and fcm_token_updated_at for Firebase Cloud Messaging, current_device, is_active, is_logged_in, is_staff, is_superuser, date_joined, and password_set status. | Initially, institution_id and hospital were unique together, but this constraint was removed. | . | SiteUser: . | Represents administrators for the entire MemoTrack system (not hospital-specific). | Stores name and password. | The save method automatically hashes the password using SHA256. | check_password verifies a raw password against the stored hash. | . | . | serializers.py: . | HospitalSerializer: Serialises Hospital model data, including id, name, geolocation_point, radius, and address. | AuthTokenRequestSerializer: Used for login requests, requiring phone and password, with an optional fcm_token. | UserSerializer: Serialises the User model, providing read-only fields for current_block_name, current_block_id, current_ward_id, current_ward_name, floor, role name and ID, hospital_id, and role-based permissions (is_approver, is_responder, is_creator, is_superuser, is_staff). | AuthTokenResponseSerializer: Used for login responses, providing the authentication token, and the user and hospital data serialised by their respective serializers. | . | signals.py: . | update_admin_staff_status: A post_save signal receiver for the User model. | If a user’s role name is ‘ADMIN’, it updates all users with that role to have is_staff=True. If a user’s role is not ‘ADMIN’ and they are staff (but not superuser), their is_staff status is set to False. | . | tests.py: An empty file, typically reserved for Django unit tests for the accounts app. | urls.py: . | Defines URL patterns for administrative login, logout, dashboard, and management pages. | Includes endpoints for managing SiteUser accounts, Hospital records, and User accounts within hospitals. | . | views.py: . | Contains Django views for rendering HTML pages and Django REST Framework APIView classes for API endpoints. | Admin HTML Views: admin_login, admin_logout, admin_dashboard, admin_page (for managing site-wide admins), delete_siteuser, admin_profile, hospitals (for managing hospitals), delete_hospital, switch_hospital (to switch admin context), hospital_users (for managing users within a specific hospital), and delete_hospital_user. | CustomAuthToken (APIView): Handles user authentication with phone number and password. It retrieves or creates an auth token, updates the user’s is_logged_in status, FCM token, and last_login timestamp. | LogoutView (APIView): Logs out the authenticated user. For superusers, it removes their hospital association, while for others, it sets is_logged_in to False. | RefreshUserView (APIView): Allows an authenticated user to refresh their user data and token. | . | . backend/accounts/management/commands/ . This directory contains custom Django management commands for data setup. | setup_nurses.py: A command to seed nurse users into the database from a specified JSON file. It creates a “Ward Staff Nurse” role if it doesn’t exist and associates users with the first hospital found. | setup_users.py: A command to seed a predefined set of roles (e.g., ‘Ward Staff Nurse’, various ‘Approvers’, and ‘Responders’) and users from an embedded JSON string for the first hospital in the system. | setup_users_from_json.py: Similar to setup_nurses.py, but designed to process a JSON file containing nested department data to create nurse users. | . backend/accounts/migrations/ . This directory contains Django migration files, which track changes to the accounts app’s database schema over time. Examples include initial model creation, adding/removing fields, and altering unique constraints. backend/accounts/templates/accounts/ . This directory contains HTML templates specifically for the accounts Django app’s web interface. | admin_dashboard.html: The main dashboard for administrators, providing links to manage site admins, hospitals, and profiles. | admin_login.html: The login form for system administrators. | admin_page.html: A page for managing (adding/deleting) site-wide admin users. | admin_profile.html: A page for administrators to update their profile (username and password). | hospital_users.html: A page to view and manage users associated with a specific hospital, allowing addition and deletion of users. | hospitals.html: A page to manage (add/delete) hospitals and navigate to manage users within each hospital. | . backend/app/ . This directory contains sub-applications related to core functionalities like infrastructure and memos. | __init__.py: An empty file that signifies the app directory is a Python package. | . backend/app/infrastructure/ . This Django app manages hospital infrastructure entities like blocks, wards, and approval hierarchies. | __init__.py: An empty file. | admin.py: An empty file, intended for Django Admin configurations specific to infrastructure models. | apps.py: Defines the InfrastructureConfig for the app.infrastructure app. | models.py: . | ApproverHierarchy: Defines a sequence of approval levels for memos, indicating if the hierarchy is is_active. | ApproverLevel: Represents a specific Role within an ApproverHierarchy and its priority (lower means higher priority). | BlockChange: Records when a user changes their current_block, including from_block, to_block, user, and changed_at. | WardChange: Records when a user changes their current_ward, including from_ward, to_ward, user, and changed_at. | . | permissions.py: Defines custom Django REST Framework permission classes to control access to API endpoints based on user roles and hospital affiliation. | HospitalPermission: Allows safe methods (GET, HEAD, OPTIONS) for all. PUT and PATCH are restricted to superuser or staff. DELETE is never allowed. | IsHospitalUserOrSuperUser: Allows safe methods for all users. POST is restricted to superuser. PUT/PATCH and DELETE are allowed for superuser or staff modifying their own hospital. | RoleEditPermission: Allows safe methods for all. All methods are allowed for superuser. staff can only perform actions on roles within their own hospital. | UserPermission: Allows safe methods for all. All methods are allowed for superuser. staff can add/edit/delete users within their own hospital. A normal user can PUT/PATCH their own profile. | WardPermission: Allows safe methods for all. POST and DELETE are allowed for superuser or staff within their own hospital. | . | serializers.py: . | HospitalSerializer: (Redundant definition, already in accounts/serializers.py) Serialises Hospital model data. | RoleSerializer: Serialises Role objects, showing the hospital name, and is_approver, is_responder, is_creator, is_protected flags. | HospitalUserSerializer: Serialises User objects for hospital-specific contexts. It handles creation of users by associating them with a Hospital and setting their password. | BlockSerializer: Serialises Blocks model data. It automatically associates new blocks with the hospital_id from the URL context and sets the created_by user. | ShiftSerializer: Serialises Shift model data. Similar to BlockSerializer, it handles hospital association and created_by user. | WardSerializer: Serialises Ward model data, including its associated block and floor. It includes a validate method to ensure the floor is within the block’s no_of_floors range. | ApproverLevelSerializer: Serialises ApproverLevel objects, exposing role, role_name, and priority. | ApproverHierarchySerializer: Serialises ApproverHierarchy objects, including nested ApproverLevelSerializer for its levels. It requires at least one level and handles creation and updates of nested levels. | . | tests.py: An empty file for infrastructure-related tests. | urls.py: . | Defines API routes for hospital-related infrastructure using rest_framework.routers.DefaultRouter and rest_framework_nested.routers.NestedDefaultRouter. | Includes nested routes under /api/hospitals/ for roles, users, shifts, blocks, hierarchies, and wards. | Also defines direct paths for /api/set-password/, /api/switch-block/, and /api/switch-ward/. | . | views.py: . | Contains viewsets.ModelViewSet classes for various infrastructure models and APIView classes for specific actions. | HospitalViewSet: Manages Hospital records, using IsHospitalUserOrSuperUser permissions. It explicitly disallows DELETE operations. | PasswordChangeViewSet: An APIView to allow users to change their password by providing their phone number and new password. | RoleViewSet: Manages Role records within a hospital. It applies RoleEditPermission and allows filtering roles by their is_responder status. | HospitalUserViewSet: Manages User records specifically for a given hospital, excluding superusers. It uses UserPermission. | BlockViewSet: Manages Blocks within a hospital. It associates the creating user and hospital with the new block. | ShiftViewSet: Manages Shift records within a hospital, associating the creating user and hospital. It explicitly disallows DELETE operations. | ApproverHierarchyViewSet: Manages ApproverHierarchy records, filtering by roles within a hospital. | WardViewSet: Manages Ward records. It allows filtering by block and floor and supports soft-deletion (marking as deleted=True) and restoring of wards, with permanent deletion only for superusers. | SwitchBlock (APIView): Allows a user to change their current_block and logs this change as a BlockChange event. | SwitchWard (APIView): Allows a user to change their current_ward, logs it as a WardChange event, and automatically updates their current_block to the ward’s associated block. | . | . backend/app/infrastructure/migrations/ . This directory contains Django migration files for the app.infrastructure app, tracking database schema changes related to ApproverHierarchy, ApproverLevel, BlockChange, and WardChange models. backend/app/memos/ . This Django app manages memo creation, events, snapshots, and dashboard data. | __init__.py: An empty file. | admin.py: An empty file, intended for Django Admin configurations specific to memo models. | apps.py: Defines the MemosConfig for the app.memos app. The ready method ensures signals are imported. | cron_job.py: Contains functions for precomputing dashboard data for performance. | get_card_metrics(data): Calculates overall memo statistics like total, completed, completion rate, average resolution time, and fastest responder. | get_block_ward_heatmap(data): Generates counts of memos per block and ward for heatmaps. | get_responder_resolution(data): Calculates the average resolution time for each responder role. | get_status_pie(data): Categorises memos into ‘completed’, ‘rejected’, and ‘ongoing’ statuses. | get_approval_flow(data): Tracks the approval status of memos across predefined hierarchy levels (e.g., Ward Superintendent, RMO, DEAN). | get_department_distribution(data): Counts memos per department. | get_completion_timeline(data): Categorizes memo completion times into buckets (e.g., 0-2h, 2-6h, Over 6h). | precompute_dashboard_data_and_save(hospital_id=None): Generates and saves dashboard data as JSON files (e.g., hospital_id_YYYY-MM-DD.json) for specific hospitals or all combined, for ‘today’, ‘week’, and ‘month’ periods. Files are stored in settings.MEDIA_ROOT/dashboard/. | precompute_all_hospitals_dashboard_data(): Triggers the precomputation process for all hospitals in the system. | get_hospital_dashboard_data(hospital_id, period): Retrieves the precomputed dashboard data from the saved JSON files for a given hospital and period (today, week, or month). | . | models.py: . | Memo: The central model for a memo, identified by a memoId (UUID). It tracks hospital association, is_deleted, is_merged, created_at, and modified_at. It has a latest_snapshot method to retrieve the most recent state. | MemoEvents: Records every significant event related to a Memo (e.g., ‘created’, ‘updated’, ‘deleted’, ‘approved’, ‘rejected’, ‘attended’, ‘completed’, ‘tagged’). Each event is associated with a memo, event_by user, and includes payload and metadata JSON fields. | MemoSnapshot: Stores a immutable snapshot of a memo’s state at a particular timestamp. It includes info (contextual data about the memo and user), hierarchy (approval structure), approval_history, worker_status (list of work updates), attendee_otp, and completion_otp. It has methods refresh_otp and generate_otp to create one-time passwords. | AttendeeETA: Tracks the estimated time of arrival (eta) for a User (attendee) regarding a specific Memo. It also records created_at, updated_at, and updated_count for ETA changes. | . | serializers.py: . | MemoSerializer: Serialises MemoSnapshot data to provide a summary view, showing memoId, created_at, and latest_snapshot info. | MemoCreateSerializer: Used to create a new Memo instance and log its initial ‘created’ event. It also includes a delete method for soft-deleting memos. | MemoSnapshotSerializer: A comprehensive serializer for MemoSnapshot, exposing all its fields including OTPs. | AttendeeETASerializer: Serialises AttendeeETA instances, showing attendee ID and name, memo ID, eta, and tracking fields. | MemoEventsSerializer: Serialises MemoEvents instances. | . | signals.py: . | create_memo_snapshot: A post_save signal receiver for MemoEvents. | It creates a new MemoSnapshot for most event types, capturing the memo’s state and user context at that moment. | Special handling for events: . | worker_status_delete: Updates the latest snapshot to mark a specific worker status entry as deleted. | updated: Modifies the info field of the latest existing snapshot instead of creating a new one. | approved / rejected: Updates the hierarchy and approval_history in the latest snapshot to reflect the approval/rejection status by the specific role. | attended / completed / incomplete / tagged: Appends new entries to the worker_status list in the latest snapshot. If the event is completed, it also updates the memo’s overall status in the info field. tagged events trigger memo_tagged_notification. | . | For created events, it populates the snapshot info with user context (role, block, ward, floor) and memo details (complaint, department, tagged role). It also applies the currently is_active ApproverHierarchy to the snapshot. memo_created_notification is triggered for new memos. | . | tests.py: An empty file for memo-related tests. | urls.py: Defines URL patterns for memo API endpoints, including: . | create-memo/. | memos/ (list user memos). | memos/&lt;memoId&gt;/ (memo detail and update). | memos/&lt;memoId&gt;/approve/ and reject/. | memos/&lt;memoId&gt;/work-status/ (for worker updates and deletion). | memos/&lt;memoId&gt;/attendee-eta/ (for ETA management). | memos/&lt;memoId&gt;/refresh-otp/ (to generate new OTPs). | . | views.py: . | CreateMemoView: Handles the creation of new memos and their initial MemoSnapshot, logging a ‘created’ event. | ListUserMemosView: Provides structured lists of memos based on the requesting user’s role (creator, approver, responder, or admin), fetching the latest snapshots for each memo and categorising them accordingly (e.g., ‘My Memos’, ‘Under Review’, ‘Open Memos’, ‘Completed’, ‘Deleted Memos’). | MemoDetailView: Retrieves the latest snapshot of a specific memo. It also handles PATCH requests to update a memo’s details by logging an ‘updated’ event. | MemoApproveView: Allows an authenticated user to approve a memo by logging an ‘approved’ event. | MemoRejectView: Allows an authenticated user to reject a memo by logging a ‘rejected’ event. | AttendeeETACreateView: Provides API endpoints to view all existing ETAs for a memo, create a new ETA, or update the current user’s ETA for a memo. | MemoWorkStatusView: Handles POST requests for adding worker status updates (e.g., ‘attended’, ‘completed’, ‘incomplete’, ‘tagged’) to a memo. It includes OTP verification for ‘attended’, ‘incomplete’, ‘tagged’, and ‘completed’ statuses. It also handles DELETE requests to soft-delete a specific worker status entry by logging a worker_status_delete event. | RefreshOTPView: Allows refreshing the attendee_otp and completion_otp for a memo’s latest snapshot. | . | . backend/app/memos/management/commands/ . This directory contains custom Django management commands for memo-related tasks. | generate_dashboard_data.py: A management command that triggers the precompute_all_hospitals_dashboard_data function from cron_job.py to generate precomputed dashboard data files. | . backend/app/memos/migrations/ . This directory contains Django migration files for the app.memos app, tracking database schema changes related to Memo, MemoEvents, MemoSnapshot, and AttendeeETA models. backend/core/ . This directory contains the core Django project configuration. | __init__.py: An empty file. | asgi.py: The ASGI (Asynchronous Server Gateway Interface) configuration for the project, used for asynchronous Python web servers. | settings.py: The main Django project settings file. | BASE_DIR: Defines the base directory of the project. | SECRET_KEY: A unique key for cryptographic signing. | DEBUG: Set to True for development. | ALLOWED_HOSTS: Specifies hostnames the Django project can serve, including '*' for development and specific production URLs. | AUTHENTICATION_BACKENDS: Lists authentication backends, including Django’s ModelBackend. | INSTALLED_APPS: Lists all active Django applications, including accounts, management, app.infrastructure, app.memos, and various Django/DRF/CORS related apps. | AUTH_USER_MODEL: Specifies the custom user model (accounts.User). | REST_FRAMEWORK: Configures Django REST Framework, including default schema class, authentication classes (TokenAuthentication, SessionAuthentication), permission classes (IsAuthenticated), and filter backends. | MIDDLEWARE: Defines the order of middleware components, including CorsMiddleware and custom OriginLoggerMiddleware. | ROOT_URLCONF: Points to the main URL configuration file (core.urls). | TEMPLATES: Configures Django’s templating engine, including DIRS for shared templates and APP_DIRS for app-specific templates. | WSGI_APPLICATION: The WSGI (Web Server Gateway Interface) configuration for the project. | DATABASES: Configures the database connection, currently set up for MySQL using environment variables for credentials. | AUTH_PASSWORD_VALIDATORS: Defines password validation rules. | TIME_ZONE: Set to Asia/Kolkata. | STATIC_URL: URL prefix for static files. | SPECTACULAR_SETTINGS: Configures DRF Spectacular for API documentation generation. | CORS Settings: CSRF_TRUSTED_ORIGINS, CORS_ALLOWED_ORIGINS, CORS_ALLOW_CREDENTIALS, CORS_ALLOW_ALL_ORIGINS, CORS_ALLOW_HEADERS, CORS_ALLOWED_METHODS are configured to handle cross-origin requests, including specific domains for frontend and development purposes. | MEDIA_URL and MEDIA_ROOT: Define settings for serving user-uploaded media files. | . | urls.py: . | The main URL configuration for the entire Django project. | Includes URLs for Django Admin, accounts app, app.infrastructure app, and app.memos app. | Includes custom API authentication and user refresh endpoints. | Integrates DRF Spectacular for API schema, Swagger UI, and ReDoc documentation interfaces. | Serves media files during development. | . | wsgi.py: The WSGI configuration for the project, used for synchronous Python web servers. | . backend/core/middleware/ . This directory contains custom Django middleware. | __init__.py: An empty file. | origin_logger.py: Defines OriginLoggerMiddleware, a custom middleware that logs the HTTP_ORIGIN, HTTP_REFERER, and HTTP_USER_AGENT headers for every incoming request. | . backend/management/ . This Django app is for managing general hospital-related data like blocks and shifts. | __init__.py: An empty file. | admin.py: Configures Django Admin to display Blocks and Shift models, ensuring that non-superuser admins only see data relevant to their hospital. | apps.py: Defines the ManagementConfig for the management app. | models.py: . | Blocks: . | Represents a building block or section within a hospital. | Fields include name, no_of_floors, hospital, created_by, created_at, and updated_at. | It enforces uniqueness of name within each hospital. | . | Ward: . | Represents a ward, associated with a Blocks instance. | Fields include ward_name, block, floor, deleted (for soft-deletion), created_at, created_by, and updated_at. | The clean method provides validation to ensure the floor number is valid for the associated block. | . | Shift: . | Represents work shifts within a hospital. | Fields include name, start_time, end_time, hospital, created_by, created_at, and updated_at. | It enforces uniqueness of name within each hospital. | . | . | tests.py: An empty file for management-related tests. | views.py: An empty file, intended for management-related views. | . backend/management/migrations/ . This directory contains Django migration files for the management app, tracking database schema changes related to Blocks, Shift, and Ward models. backend/templates/ . This directory contains general HTML templates used across the Django project. | base.html: A base HTML template that provides a common structure for other pages, including a header with “Memotrack” branding and navigation links (Dashboard, Site Admins, Hospitals, Profile, Logout). | error.html: A template designed to display error messages, with a “Go Back” button. | accounts/password_setup.html: An empty file, suggesting it might be a placeholder for a password setup/reset page. | . ",
    "url": "/backend-docs.html",
    
    "relUrl": "/backend-docs.html"
  },"15": {
    "doc": "Common Workflow",
    "title": "Common Workflow",
    "content": "Comman For All Users . 1. Open the App . 2.Enter the Phone Number and its password . 3. Click Login buttun to login . Logout . 1. Got to the profile by click the dashboard . 2. On the right corner to click the Logout button to logout . ###2. 3.After that, it ask the confirmation to logout. so again click the Logout button to logout . Set password . 1. Open the App, click the set password . 2. Enter the phone number to set the password . 3. Enter the password . 4. Again enter the same password to confirm the password . 5. After confirm the password, click set password to set the new password to that number . Profile page . 1. You can View your name, role, hospital,current locatio, able to change the block, and also see the permisions . ",
    "url": "/usermanual/common.html",
    
    "relUrl": "/usermanual/common.html"
  },"16": {
    "doc": "Flutter App Docs",
    "title": "Flutter App Docs",
    "content": "The MemoTrack Flutter application is designed as a comprehensive hospital management application, aimed at efficiently managing and tracking memos within a hospital setting. App Specification and Requirements . | Application Name: The project is internally named hospital_management in pubspec.yaml, but the Android application label is MemoTrack, and its package name is com.memotrack.myapp. | Version: The application is at version 2.0.1+11. | Environment: It is built for Flutter SDK versions ‘&gt;=3.0.0 &lt;4.0.0’. | Core Functionality: . | User authentication with role-based access. | Management of hospital infrastructure elements like blocks and wards. | Display and interaction with memos, potentially via an embedded web (React) application. | Notifications via Firebase Cloud Messaging (FCM). | Speech-to-text functionality for input. | Image upload associated with memos. | . | Firebase Integration: . | Uses Firebase Core, Firebase Messaging, and Firebase Remote Config. | The project ID is memo-track. | Firebase Messaging is configured to handle foreground, background, and terminated state notifications using flutter_local_notifications. | Remote Config is used to fetch dynamic configurations, including the backend and frontend (React) API URLs. | . | API Communication: . | Communicates with a backend API, with a base URL primarily configured via Firebase Remote Config (defaulting to https://memotrack.pythonanywhere.com). | Supports various API endpoints for authentication, user management, hospital data, roles, blocks, shifts, wards, and memo operations (create, update, approve, reject, worker status). | . | Frontend Integration (React): . | The app embeds a React web application using webview_flutter to display complex UI, especially for memo lists and details. | A JavaScript channel (ReactToFlutter) enables two-way communication between the Flutter app and the embedded React app for actions like updating user data or triggering image uploads. | Another JavaScript channel (SpeechToText) is used to send speech recognition results and status to the React app. | Authentication tokens and user data are injected into the WebView’s localStorage for the React app to utilise. | . | Platform Specific Features: . | Handles tel:, sms:, and mailto: URLs natively. | Retrieves SIM card phone numbers using platform channels (sim_info_channel). | . | Assets: Includes various images (ic_launcher.png, app_logo.png) and a Lottie animation (no_internet.json). | Build Automation: Utilises GitHub Actions for continuous integration, including building Android App Bundles (AAB) and APKs, and for manual production builds with configurable environment and API URLs. | . Dependencies from pubspec.yaml . | State Management: provider | HTTP Requests: http | Local Storage: shared_preferences | UI Components: cupertino_icons, webview_flutter, animated_text_kit, lottie | Notifications: firebase_messaging, firebase_core, flutter_local_notifications | Permissions: permission_handler | Voice Input: speech_to_text, translator | Remote Configuration: firebase_remote_config | Platform Integrations: android_intent_plus, connectivity_plus, image_picker, path, url_launcher, package_info_plus | . Dev Dependencies from pubspec.yaml . | flutter_test | flutter_lints | flutter_launcher_icons | . lib Directory File Documentation . The lib directory is the heart of the Flutter application, containing all the Dart source code. | lib/main.dart . | Purpose: This is the application’s entry point. It handles the initial setup including Firebase, Firebase Messaging for push notifications, remote configuration, and ensures essential notification permissions are requested. It then launches the main MyApp widget. | Key Contents: . | main(): Asynchronously initialises WidgetsFlutterBinding, Firebase, and sets up Firebase Messaging specifically for Android and iOS platforms. | setupFirebaseMessaging(): Configures FCM for the app, handling token retrieval, token refresh listeners, and setting up flutter_local_notifications to display foreground notifications and handle notification taps (routing to MemoWebViewPage). | _firebaseMessagingBackgroundHandler(): A crucial top-level function that ensures Firebase is initialised to process messages when the app is in the background. | _handleMessage(): Navigates the app to the MemoWebViewPage to display a specific memo when a notification containing a memo_id is tapped. | MyApp: The root widget, responsible for setting up the AuthProvider for global state management, defining the application’s material design theme (AppTheme.lightTheme), and designating WelcomePage as the initial screen. | . | . | lib/welcome.dart . | Purpose: Serves as the initial splash screen, presenting animated text while performing critical startup checks such as internet connectivity and necessary device permissions before navigating to the login or home screen. | Key Contents: . | _WelcomePageState: Manages animations (fade and slide) for the intro sequence. | _handleStartupSequence(): Orchestrates the asynchronous execution of internet connectivity checks, permission requests, and the authentication flow. | _checkInternet(): Verifies network availability using connectivity_plus and displays a Lottie animation (no_internet.json) if offline, providing options to retry or open network settings. | _checkPermissions(): Requests crucial permissions like microphone, storage, and phone needed for app functionality. | _handleAuthAndRedirect(): Utilises the AuthProvider to determine if a user is authenticated and directs them to HomeWrapper (if logged in) or LoginScreen (if not). | . | . | lib/components/switch_dialogs.dart . | Purpose: Provides reusable Flutter dialogs for block and ward selection. These dialogs embed a WebViewWidget to render interactive HTML content fetched from the API, enabling a dynamic selection experience. | Key Contents: . | BlockSelectionDialog/_BlockSelectionDialogState: Displays a WebViewWidget to present a list of blocks. It fetches block data using apiService.getBlocks and communicates user selection back to Flutter via a JavaScript channel (FlutterChannel). | BlockSwitchingDialog: A wrapper around BlockSelectionDialog that includes logic to call the apiService.switchBlock endpoint and display snackbar confirmations/errors upon successful or failed block switching. | WardSelectionDialog/_WardSelectionDialogState: Functions identically to BlockSelectionDialog but is tailored for ward selection, fetching data using apiService.getWards. | WardSwitchingDialog: A wrapper for WardSelectionDialog that integrates the apiService.switchWard functionality. | . | . | lib/core/theme/app_theme.dart . | Purpose: Centralises the visual styling and theming for the entire application, ensuring a consistent look and feel across all screens. | Key Contents: . | AppFontSizes: Defines a set of static font size constants. | AppTheme: Provides the lightTheme configuration, which leverages Material3 and customises ColorScheme, scaffoldBackgroundColor, appBarTheme, cardTheme, elevatedButtonTheme, outlinedButtonTheme, textButtonTheme, inputDecorationTheme, drawerTheme, listTileTheme, and textTheme using a defined palette of colours and font sizes. | AppSpacing and AppRadius: Static constants for consistent padding, margins, and border radii. | . | . | lib/models/auth_response.dart . | Purpose: Defines Dart classes for parsing authentication responses from the API and for representing block data. | Key Contents: . | AuthResponse: A model class holding the token, User, and Hospital objects received post-login, with fromJson and toJson methods for serialization. | Block: A simple data model for a block, containing its id, name, description, and hospitalId. | . | . | lib/models/hospital.dart . | Purpose: Defines the data structure for a Hospital object, including its geographical and contact information. | Key Contents: . | Hospital: Model class with fields for id, name, geolocationPoint, radius, and address, complete with fromJson and toJson methods. | . | . | lib/models/hospital_models.dart . | Purpose: Provides specific data models for hospital infrastructure elements, such as blocks and wards, distinct from the generic Block model in auth_response.dart. | Key Contents: . | HospitalBlock: Models a block with id, name, noOfFloors, and hospitalId. Includes robust fromJson parsing. | HospitalWard: Models a ward with id, name, block (ID), floor, and hospitalId, also with fromJson parsing. | . | . | lib/models/toast_model.dart . | Purpose: Offers a utility to display custom, top-positioned toast messages (e.g., for success or error notifications) without relying on external packages. | Key Contents: . | showTopToast(): A function that creates a temporary OverlayEntry to display a custom SnackBar-like message, fading out after a set duration. | . | . | lib/models/user.dart . | Purpose: Defines the comprehensive data model for a user within the application, including their personal details, roles, and current operational context. | Key Contents: . | User: A model with extensive fields such as id, institutionId, role, phoneNumber, FCM tokens, current block/ward/floor, hospital ID, and role-based boolean flags like isApprover, isSuperuser, isResponder, isCreator. | fromJson(): Factory constructor for instantiating a User object from a JSON map. | copyWith(): Provides a convenient way to create a new User instance with some fields updated while others remain the same. | . | . | lib/providers/auth_provider.dart . | Purpose: Manages the global authentication state of the user using the Provider package, ensuring user and hospital data persist across sessions via shared_preferences. | Key Contents: . | Private fields: _user, _hospital, _token, _isLoading, _error store the current authentication state. | Getters: Provide access to boolean flags reflecting the user’s roles (isSuperuser, isApprover, isResponder, isCreator). | initializeAuth(): Loads previously saved authentication data from SharedPreferences when the app starts. | login(), setPassword(), logout(): Methods to handle authentication operations by interacting with ApiService and managing the local authentication state. | updateFCMToken(), updateCurrentBlock(), updateCurrentWard(): Update user-specific data both locally and on the backend. | _saveAuthData(), _saveUserData(): Helper methods to persist authentication and user data to SharedPreferences. | parseApiError(): A utility to extract and format readable error messages from API responses. | . | . | lib/screens/block_selection_screen.dart . | Purpose: A screen that allows a user (specifically approvers, based on the HomeWrapper logic) to select their current working block, which then updates their profile and redirects them. | Key Contents: . | _BlockSelectionScreenState: Manages the selected block’s ID and name, lists available blocks, and handles loading/error states. | _loadBlocks(): Fetches the list of blocks from the ApiService for the user’s hospital. | _submit(): Calls ApiService().updateUser and ApiService().switchBlock to update the user’s block on the backend, then updates the AuthProvider and navigates the user accordingly (either back to the dashboard or to the HomeWrapper). | . | . | lib/screens/main_navigation.dart . | Purpose: Implements the main bottom navigation structure of the app, allowing users to switch between different sections (Dashboard, Memos). It also ensures that deep links from notifications navigate to the correct memo page. | Key Contents: . | _navigatorKeys: A list of GlobalKeys, each associated with a separate Navigator for independent navigation stacks within each tab. | _selectedIndex: Tracks the currently active tab. | _redirectToMemo(): Specifically handles navigation to a MemoWebViewPage with a given memoId, typically invoked when a push notification is tapped. | _onItemTapped(): Manages tab switching and popping to the root of a tab’s navigation stack if the same tab is re-tapped. | PopScope: Controls the app’s back button behaviour, popping routes within the current tab or switching to the first tab if no more routes are available. | . | . | lib/screens/memo_list_page.dart . | Purpose: Displays a searchable, filterable, and sortable list of memos, providing a user-friendly interface for managing maintenance requests. | Key Contents: . | State variables: _allMemos, _filteredMemos, _searchQuery, _selectedDepartment, _sortBy, _sortAscending, _currentPage, _departments manage memo data, filters, and pagination. | _loadMemos(): Fetches memos from the ApiService and populates the lists, also extracting unique departments for filtering. | _applyFiltersAndSearch(): Applies the active search query, department filter, and sorting order to the memo list. | _paginatedMemos: A getter that provides the subset of memos for the current page. | _showFilterBottomSheet(): Presents a modal bottom sheet (_FilterBottomSheet) for users to interact with filtering and sorting options. | UI: Features an AppBar with filter and refresh actions, a persistent search bar, filter summary chips, memo count, and paginated list of memo cards. | . | . | lib/screens/memo_web_page.dart . | Purpose: Embeds the React-based memo management interface as a WebViewWidget within the Flutter application. It serves as the primary bridge for deep interaction between the native Flutter environment and the web frontend. | Key Contents: . | WebViewController _controller: The core component for managing the WebView, enabling JavaScript execution, handling navigation requests (like tel:, sms:, mailto: URLs are opened natively), and managing communication channels. | reactUrl: The URL of the React frontend application, obtained from RemoteConfigService. | Speech-to-text integration: Includes setup for SpeechToText (requesting microphone permission, initialising SpeechToText, managing locales like Tamil and English), and methods (_startListening, _stopListening, _changeLanguage) to send real-time speech results and status back to the React app via the SpeechToText JavaScript channel. | _injectUserData(): A crucial method that injects the Flutter app’s authentication token, user data, hospital data, and Flutter app version into the WebView’s localStorage, making it accessible to the React frontend. | _handleReactMessage(): Listens for messages sent from the React app via the ReactToFlutter JavaScript channel. It handles actions like updateUser (to update the native Flutter user state) and uploadImage (to navigate to the native image upload screen). | . | . | lib/screens/splash_screen.dart . | Purpose: This file is commented out in the provided source code, indicating it’s likely an older or alternative splash screen implementation. Its original intent was to handle initial app loading, authentication checks, and navigation. This functionality appears to have been superseded by lib/welcome.dart. | . | lib/screens/upload_memo_image.dart . | Purpose: Provides a dedicated screen for users to capture or select an image and upload it, associating it with a specific memo. | Key Contents: . | memoId: The identifier for the memo to which the image will be linked. | _pickImage(): Uses the image_picker package to allow users to choose an image from their camera or photo gallery. | _uploadImage(): Handles the actual image upload using http.MultipartRequest, sending the image along with memo_id, user_id, and user_name as headers to a specified API endpoint (https://memo-track.free.beeceptor.com/api/img). | . | . | lib/screens/ward_selection_screen.dart . | Purpose: Enables users to select their current working ward, with wards organized by block and floor for easier navigation and selection. It supports searching and filtering. | Key Contents: . | Data structures: allWards, wardsByBlock, blockNames manage the ward data and its organization. | _loadWards(): Fetches ward data from the ApiService. | _organizeWardsByBlock(): Groups wards by their associated block and sorts them for display. | _filterWards(): Updates the displayed list of wards based on a user’s search query. | _submit(): Updates the user’s selected ward on the backend via ApiService and updates the AuthProvider’s state. | UI: Features a search bar, expandable ExpansionTile widgets for each block, and ListTiles for individual wards, allowing selection via radio buttons. | . | . | lib/screens/auth/login_screen.dart . | Purpose: Provides the user login interface and logic, including phone number and password input, form validation, and navigation after successful authentication. | Key Contents: . | _formKey: Used for form validation. | _phoneController, _passwordController: Text controllers for the input fields. | _checkConnectivityAndPermissions(): Ensures the device has internet access and necessary permissions before attempting login. | _login(): Calls authProvider.login with user credentials. Upon success, it navigates to BlockSelectionScreen (for approvers) or HomeWrapper (for others). On failure, it uses showTopToast to display an error message. | _navigateToSetPassword(): Directs the user to the SetPasswordScreen. | UI: Displays the app logo, title, a login form with phone number and password fields (including a password visibility toggle), and action buttons for login and setting a new password. | . | . | lib/screens/auth/set_password_screen.dart . | Purpose: Enables users to set or reset their account password using their phone number, with an integrated feature to pick phone numbers directly from the device’s SIM cards. | Key Contents: . | _formKey: For form validation. | _phoneController, _passwordController, _confirmPasswordController: Controllers for input fields. | _setPassword(): Calls authProvider.setPassword to update the password on the backend. Navigates to HomeWrapper on success or displays an error toast. | _selectSimNumber(): Requests phone permissions and then uses SimService.getSimNumbers() to fetch and display available SIM card numbers for selection in a bottom sheet. | _removeCountryCode(): A helper function to clean up phone numbers obtained from SIM cards by removing country codes. | UI: Contains input fields for phone number (with SIM selection), new password, and confirm password (both with visibility toggles), along with buttons to set the password. | . | . | lib/screens/home/admin_home_screen.dart . | Purpose: (Partially implemented) Intended as an administrative home screen featuring a dashboard and a navigation drawer for various administrative sections. | Key Contents: . | _selectedIndex, _screens, _navigationItems: Manage which screen is currently displayed and define the drawer navigation options. | _buildDrawer(): Constructs the app’s navigation drawer with a header and list tiles for different sections (e.g., Dashboard, Users, Profile). The “Users” and “Profile” sections are commented out but indicate planned functionality. | . | . | lib/screens/home/block_selection_screen.dart . | Purpose: This file is commented out and represents an alternative or deprecated implementation for block selection within the home modules. The active implementation for block selection is located at lib/screens/block_selection_screen.dart. | . | lib/screens/home/dashboard_screen.dart . | Purpose: Displays the primary dashboard for authenticated users, presenting a summary of user information, hospital details, current location (block/ward), and assigned permissions. It also provides options for relevant actions like switching locations or logging out. | Key Contents: . | _showBlockSwitchingForm(): Directs to the BlockSelectionScreen (the active one) for users to change their current block. | _showWardSwitchingForm(): Directs to the WardSelectionScreen for users to change their current ward. | _buildPermissionChip(): A helper function to visually represent user permissions (Superuser, Approver, Responder, Creator) as chips. | _showLogoutDialog(): Presents a confirmation dialog for user logout. | UI: Organised into cards, it displays a welcome message with user ID and role, hospital name and address, current block and ward (if set), and a dynamic section for block/ward switching buttons based on the user’s roles. A “Permissions” section clearly lists all assigned roles. | . | . | lib/screens/home/home_wrapper.dart . | Purpose: Acts as an intermediary screen after authentication to direct the user to the appropriate starting point in the application based on their role and current state. | Key Contents: . | Conditional Navigation: . | If no user is authenticated, it renders LoginScreen. | If the user is an approver (auth.isApprover) and has no currentBlockId set, it directs them to the BlockSelectionScreen to select a block. | Otherwise (for all other authenticated users or approvers with a block set), it displays the MainNavigation widget, which contains the main app tabs. | . | . | . | lib/services/api_service.dart . | Purpose: Provides a centralized interface for all interactions with the backend API, handling HTTP requests, authentication token management, and response parsing. It uses a singleton pattern to ensure a single instance throughout the app. | Key Contents: . | baseURL: A static variable that holds the API’s base URL, dynamically set from RemoteConfigService during initialisation. | Singleton Pattern: ApiService._internal() and factory ApiService() ensure only one instance is created. | _getToken(), _getHeaders(): Private methods for retrieving the authentication token from SharedPreferences and constructing HTTP request headers. | _makeRequest(), _makeListRequest(): Generic private methods that abstract the HTTP request logic (GET, POST, PATCH, DELETE) for single object and list responses, respectively. They handle status codes and JSON decoding, throwing exceptions for errors. | Public API Methods: A comprehensive set of methods covering all API interactions, including: . | Authentication: login(), setPassword(), logout(). | User/Hospital Data: getHospital(), updateFCMToken(), getUser(), getUsers(), createUser(), updateUser(), deleteUser(). | Role Management: getRoles(), createRole(), updateRole(), deleteRole(). | Infrastructure Management: getBlocks(), createBlock(), updateBlock(), deleteBlock(), getShifts(), createShift(), updateShift(), deleteShift(), getWards(). | Location Switching: switchBlock(), switchWard(). | Memo Operations: getMemos() (list), createMemo(), updateMemo(), approveMemo(), rejectMemo(), addWorkerStatus(), deleteWorkerStatus(), refreshOTP(). | . | . | . | lib/services/fcm_token.dart . | Purpose: Provides a utility function specifically for retrieving the Firebase Cloud Messaging (FCM) device token. | Key Contents: . | getFCMToken(): Asynchronously fetches the FCM token using FirebaseMessaging.instance.getToken(). It ensures this operation is performed only on mobile platforms (Android/iOS) and handles potential errors during token retrieval. | . | . | lib/services/remote_config_service.dart . | Purpose: Implements a singleton service for fetching and providing dynamic configuration values from Firebase Remote Config. | Key Contents: . | Singleton Pattern: Ensures only one instance of RemoteConfigService is used throughout the app. | initialize(): Configures FirebaseRemoteConfig settings (e.g., fetch timeout, minimum fetch interval) and then fetches and activates the latest configuration values. | Getters: Provides convenient methods (getString, getInt, getBool, getDouble) to retrieve configured values by their keys, with options for default values if a key is not found. | . | . | lib/services/sim_service.dart . | Purpose: Acts as a platform-specific service to retrieve phone numbers associated with the device’s SIM cards using a MethodChannel. | Key Contents: . | _channel: A MethodChannel named sim_info_channel that facilitates communication with native Android code. | getSimNumbers(): Invokes the native getSimNumbers method. It includes error handling for permission denials or if no SIM numbers are available, throwing an exception to the Dart side. (The corresponding native implementation is in MainActivity.kt in the Android project). | . | . | . ",
    "url": "/flutter-app-docs.html",
    
    "relUrl": "/flutter-app-docs.html"
  },"17": {
    "doc": "User Manual",
    "title": "User Manual",
    "content": "Welcome to the user manual… . ",
    "url": "/usermanual/",
    
    "relUrl": "/usermanual/"
  },"18": {
    "doc": "Index",
    "title": "Introduction",
    "content": "Welcome to the comprehensive documentation for the MemoTrack SAAS project, a cutting-edge hospital management application. This system has been meticulously designed to streamline maintenance and communication processes within diverse hospital environments. It offers a robust and modern solution by combining a powerful backend and a user-friendly mobile application. At its core, MemoTrack SAAS facilitates the creation, tracking, approval, and resolution of “memos”, which are essentially maintenance requests or incidents across various hospital departments, blocks, and wards. A crucial feature of the system is its multi-tenancy support, allowing different hospitals to utilise the application while ensuring data isolation and tailored access control for each. The application also leverages Firebase for real-time notifications (FCM) and remote configuration, significantly enhancing both the user experience and administrative flexibility. ",
    "url": "/#introduction",
    
    "relUrl": "/#introduction"
  },"19": {
    "doc": "Index",
    "title": "Key Concepts",
    "content": ". | SAAS Model: The application is designed as a Software-as-a-Service solution, enabling multiple hospitals to use it with separate data. | Memo Management: Memos are central to the application, representing requests or incidents, and the system maintains a complete history using an event-sourcing-like model with MemoEvents and MemoSnapshots. | Role-Based Access Control: The system implements a granular permission model, where user actions are controlled based on their assigned roles (e.g., is_approver, is_responder, is_creator, ADMIN, superuser) within a hospital. | Hybrid Frontend Architecture: The mobile application is built with Flutter but embeds a React-based web application using webview_flutter for rich memo management features. | Precomputed Dashboards: The backend precomputes dashboard data using cron jobs to provide efficient analytical insights and reporting. | . ",
    "url": "/#key-concepts",
    
    "relUrl": "/#key-concepts"
  },"20": {
    "doc": "Index",
    "title": "Documentation Structure",
    "content": "This documentation is organised into several sections to provide a clear and detailed understanding of the MemoTrack SAAS system. You can navigate to specific areas of interest using the links below: . | Backend Documentation: Explore the backend built with Django (Python), which handles business logic, data storage, API endpoints, user authentication, and Firebase Cloud Messaging (FCM) integration. This section would detail key modules such as accounts (for user and role management), infrastructure (for hospital structure), and memos (for core memo logic). It also covers cron jobs for dashboard data precomputation and various security considerations specific to the backend. | Flutter App Documentation: Delve into the details of the cross-platform mobile application developed using Flutter (Dart), which provides the primary user interface for Android, iOS, and Web. This section would describe features like user authentication, the dashboard overview, the ability to select/switch blocks and wards, and integrations with native device features such as the microphone for speech-to-text, camera/gallery for image upload, and SIM information. It also highlights the extensive use of Firebase for notifications and dynamic configuration. | React Webview Frontend Documentation: Understand the React-based web application that is embedded within the Flutter mobile app via webview_flutter. This component is crucial for handling complex and rich memo management interactions, including detailed memo views, speech-to-text functionality (supporting English/Tamil translation), and a dedicated image upload screen. It also covers aspects like user and hospital data injection into the webview’s local storage for seamless integration. | . ",
    "url": "/#documentation-structure",
    
    "relUrl": "/#documentation-structure"
  },"21": {
    "doc": "Index",
    "title": "Index",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"22": {
    "doc": "Nurse Workflow",
    "title": "Nurse Workflow",
    "content": " ",
    "url": "/usermanual/nurse.html",
    
    "relUrl": "/usermanual/nurse.html"
  },"23": {
    "doc": "Nurse Workflow",
    "title": "Login as Nurse",
    "content": "1.Open the memopage, you see the pending approval memos . 2. Click the completed to see the completed memos . 3. Click the Deleted Memos to see the Deleted memos . ",
    "url": "/usermanual/nurse.html#login-as-nurse",
    
    "relUrl": "/usermanual/nurse.html#login-as-nurse"
  },"24": {
    "doc": "Nurse Workflow",
    "title": "Create Memo",
    "content": "1. Open the Memo Page, and click the create button to create the memo . 2.After that, Click yes continue to create the memo in that ward, else click the change ward button to change the ward . 3. Enter the Complaint . 4. Enter the Department . 5. Select the role to tag . 6. After the select the role, Click the create button to create an memo . ",
    "url": "/usermanual/nurse.html#create-memo",
    
    "relUrl": "/usermanual/nurse.html#create-memo"
  },"25": {
    "doc": "Nurse Workflow",
    "title": "Memo Detail Page",
    "content": "1. Select the memo you want to edit or update . 2. Click the edit button, to edit the memo you want to proceed . 3. Click the update button, to update the memo . ",
    "url": "/usermanual/nurse.html#memo-detail-page",
    
    "relUrl": "/usermanual/nurse.html#memo-detail-page"
  },"26": {
    "doc": "Nurse Workflow",
    "title": "Refresh OTP",
    "content": "1.Click the refresh otp button to refresh the otp . 2.After Click the button . ",
    "url": "/usermanual/nurse.html#refresh-otp",
    
    "relUrl": "/usermanual/nurse.html#refresh-otp"
  },"27": {
    "doc": "Nurse Workflow",
    "title": "Attendee and Completion OTP",
    "content": "Attendee OTP . 1.Click the add first update button . 2. Select the status type as attended . 3. Enter the attendee OTP, fetched from the ward nurse . 4. Enter the description you want add something . 5. Click the post update button to post work status as attended . Completion otp . 1.Click the add first update button . 2. Select the status type as completed . 3. Enter the completion OTP, fetched from the ward nurse . 4. Enter the description you want add something . 5. Click the post update button to post work status as memo completed . ",
    "url": "/usermanual/nurse.html#attendee-and-completion-otp",
    
    "relUrl": "/usermanual/nurse.html#attendee-and-completion-otp"
  },"28": {
    "doc": "React App Docs",
    "title": "React App Docs",
    "content": "The MemoTrack application’s frontend is a React single-page application (SPA) designed as a Software-as-a-Service (SaaS) solution for hospitals [Documentation - React App too]. The React app is built using Create React App. Getting Started and Development . The React app is bootstrapped with Create React App, providing standard scripts for development and deployment. | npm start: Runs the application in development mode, typically accessible at http://localhost:3000. The page automatically reloads upon code changes. | npm run build: Compiles the application for production, generating a minified and optimised build in the build folder. This output is ready for deployment. | . Core Architecture and Technologies . The React frontend follows a “hospital-first” architecture and leverages modern web technologies for a responsive and secure experience. | Hospital-First Architecture: . | The application initiates with hospital selection. | Information about the selected hospital is stored in localStorage and is crucial for subsequent login attempts and all API requests. | . | Authentication and User Management: . | Authentication is JWT-based, interacting with the Django REST Framework backend. | Upon successful login, the authToken, user roles, and profile data are stored in localStorage for persistence. | An Axios interceptor is configured to automatically attach the authentication token to all outgoing API requests. | The AuthContext and useAuth custom hook manage the user, hospital, and token states, facilitating global access to authentication status and user roles (e.g., isSuperuser, isApprover, isResponder, isCreator, isRaiser). | . | Role-Based Routing: . | After authentication, the application routes users based on their assigned roles, using flags such as is_super_user, is_approver, is_responder, and is_raiser. | The current implementation prioritises the superuser dashboard, with other role-specific pages serving as placeholders for future expansion. | . | Styling and UI Components: . | The application uses Tailwind CSS for utility-first styling and ensures responsiveness across desktop, tablet, and mobile screens. | UI components are built using Mantine, including packages like @mantine/core, @mantine/hooks, and @mantine/notifications. | Icons are provided by Lucide React. | . | Page Structure and Routing: . | Key pages include: . | Login Page (LoginPage.jsx): Handles user authentication and allows users to set new passwords. | Dashboard Content (DashboardContent.jsx): Provides administrative interfaces for managing users, roles, blocks, approver hierarchies, and shifts. | Memos Page (MemosPage.jsx): Displays a list of memos. | Memo Detail Page (MemoDetail.jsx): Shows detailed information about a specific memo. | Ward Manager (WardManager.jsx): Manages wards associated with a particular block. | . | Client-side routing is configured via the .htaccess file to redirect specific paths (e.g., /users, /roles, /blocks, /shifts, /hierarchies, /memos, /memo/:memoId, /wards/:blockId) to index.html. | . | Code Structure: . | The recommended project structure for the frontend includes src/api/ for Axios client and API calls, src/auth/ for login/logout logic, src/context/ for Auth and hospital context, src/pages/ for page components, src/routes/ for role-based routing, and src/utils/ for helper functions. | The current file structure organises components, contexts, hooks, services, and utilities within the src/ directory. | . | API Client: . | An ApiService class centralises all backend API interactions. | It supports standard HTTP methods (GET, POST, PATCH, DELETE) and manages the Authorization header with the authentication token. | The baseURL for API requests is configured via environment variables (process.env.BACKEND_URL) or defaults to https://app.memotrack.net/. | . | State Management and Hooks: . | Beyond AuthContext, the application uses various custom React Hooks: . | useCrud: Simplifies Create, Read, Update, and Delete operations for different entities by abstracting API calls. | useForm: Manages form state, handles changes, blur events, and validates input fields based on defined schemas. | useFlutter: Provides context for communication with the Flutter environment when the React app is embedded within a WebView. | . | . | . Integration with Flutter . The React frontend is designed to be seamlessly embedded and interact with a Flutter mobile application via a WebView. | Data Injection: When loaded in Flutter, the React app receives a source=flutter query parameter. The Flutter app injects user and authentication data (user details, hospital info, authToken, and flutter_version) into the React app’s localStorage via a memo_user_ready event. | Communication Channels: A ReactToFlutter JavaScript channel enables the React app to send messages back to the Flutter host, supporting actions like updateUser, showMessage, and uploadImage (for memos). | . Important Considerations for Developers . | localStorage Check: Always verify the presence of existing hospital and user data in localStorage before determining navigation routes. | Development Focus: Initial development efforts should concentrate on implementing hospital selection, the login process, and the superuser dashboard. Other role-specific features can be added later as “Coming Soon” functionalities. | . Here is a comprehensive documentation of the files and directories within the frontend/app/src/ directory of the React application: . src/ Directory Structure Overview . The src/ directory is the core of the React application, organising its components, state management, API interactions, and utility functions into logical folders. | src/App.css | src/App.js | src/App.test.js | src/index.css | src/index.js | src/output.css | src/reportWebVitals.js | src/setupTests.js | src/components/ | src/contexts/ | src/hooks/ | src/services/ | src/utils/ | . Individual File and Folder Documentation: . Root Level Files in src/ . | App.css . | Purpose: Contains standard CSS styles for the main App component. It includes basic styling for the app’s logo, header, and links. | Details: Defines animations (e.g., App-logo-spin) and responsive styles using media queries. | Usage: Imported by App.js. | . | App.js . | Purpose: This is the main entry point for the React application’s routing and a central orchestrator for core functionalities like authentication and Flutter integration. | Key Functionality: . | Routing: Uses react-router-dom to define client-side routes, including / (dashboard), /users, /roles, /blocks, /shifts, /hierarchies, /memos, /memo/:memoId, and /wards/:blockId. | Authentication: Utilises AuthContext and the useAuth hook to determine if a user is authenticated. It conditionally renders the LoginPage or the DashboardLayout based on the authentication status. | Flutter Integration: Employs useFlutterBridge to detect if the app is embedded within a Flutter WebView (via ?source=flutter query parameter) and handles the injection of user data from Flutter into localStorage upon a memo_user_ready event. | . | Dependencies: Imports from react-router-dom, react-hot-toast, AuthContext, FlutterContext, useAuth, LoginPage, DashboardLayout, WardManager, MemosPage, MemoDetail. | . | App.test.js . | Purpose: Contains boilerplate unit tests for the App component, typically generated by Create React App. | Details: Uses @testing-library/react and @testing-library/jest-dom for testing React components. | . | index.css . | Purpose: Imports the Tailwind CSS framework, indicating that the application uses a utility-first approach for styling. | Usage: Imported by index.js to apply global styles. | . | index.js . | Purpose: The primary JavaScript entry point for the entire React application. It renders the root React component (MemoTrackApp) into the HTML DOM. | Key Functionality: . | React DOM Rendering: Uses ReactDOM.createRoot to render the application. | Mantine Provider: Wraps the application with MantineProvider to enable Mantine UI components and hooks, which are used for building the user interface. | Web Vitals Reporting: Integrates reportWebVitals for performance measurement. | . | Dependencies: Imports React, ReactDOM, index.css, MemoTrackApp, reportWebVitals, and MantineProvider. | . | output.css . | Purpose: This file is typically the compiled output of Tailwind CSS, containing all the generated utility classes and base styles used in the application. | Details: It includes definitions for colours (e.g., var(--color-red-50)), spacing (var(--spacing)), font families, and various utility classes like mt-6, flex, bg-red-50, text-center, and responsive breakpoints (sm:, md:, lg:). | . | reportWebVitals.js . | Purpose: A utility file for measuring and reporting core web vitals (CLS, FID, FCP, LCP, TTFB), crucial for performance monitoring. | Usage: Integrated into index.js. | . | setupTests.js . | Purpose: Configuration file for Jest and React Testing Library, often used to extend Jest’s matchers for DOM assertions. | Details: Imports @testing-library/jest-dom. | . | . src/components/ Directory . This directory houses reusable UI components, organised by their functional area. | src/components/auth/ . | LoginPage.jsx: . | Purpose: Handles user authentication and allows users to set new passwords. | Functionality: Manages phone number, password, and confirm password states. It interacts with the useAuth hook to perform login and password setup, displaying loading states and error messages. It can toggle between login and set password forms. | . | SetPassword.jsx: . | Purpose: Dedicated component for setting a new password. | Functionality: Takes phone number, new password, and confirm password as input. It validates inputs (e.g., passwords matching, minimum length) and calls apiService.setPassword to update the password. It uses useNavigate for potential redirection after success. | . | . | src/components/common/ . | CrudTable.jsx: . | Purpose: A generic table component designed to display and manage data for various entities (e.g., users, roles, blocks) with Create, Read, Update, and Delete (CRUD) actions. | Functionality: Renders data dynamically based on columns prop, provides “Add”, “Edit”, “Delete”, and “View” buttons, and includes a specific “Manage Wards” link for “Blocks”. | Dependencies: Uses Lucide React icons (Edit, Eye, Plus, Trash2). | . | LoadingSpinner.jsx: . | Purpose: A simple component to display a loading message and spinner while data is being fetched or processed. | Dependencies: Uses Building2 icon from Lucide React. | . | WardSelectDialog.jsx: . | Purpose: A modal dialog for selecting a ward, often used in memo creation or user block/ward switching flows. | Functionality: Fetches and displays wards grouped by block. It supports searching and filtering wards within active blocks. It allows a user to select a ward and confirms their selection before proceeding. | . | . | src/components/dashboard/ . | DashboardContent.jsx: . | Purpose: Renders the main content of the dashboard based on the activeTab selected (e.g., ‘users’, ‘roles’, ‘blocks’, ‘shifts’, ‘hierarchies’). | Functionality: Dynamically renders CrudTable for different entities. It manages modal states for creating and editing items and confirmation dialogs for deletion. Access control is based on isSuperuser or isStaff roles. | Dependencies: Uses useCrud hook for data management and various form components (UserForm, RoleForm, etc.). | . | DashboardIframe.jsx: . | Purpose: Displays precomputed dashboard data fetched from the backend, embedded within an iframe. | Functionality: Constructs the URL for the dashboard JSON data based on hospitalId, selected period (today, week, month), and selected date. It fetches the JSON data and displays loading/error states. It also includes navigation controls (previous/next period, refresh). | . | DashboardLayout.jsx: . | Purpose: Provides the overall layout for the authenticated user’s dashboard, including the header, sidebar navigation, and main content area. | Functionality: Manages sidebar open/close state, displays user and hospital information, and handles logout. It uses useLocation to determine the active tab and passes it down to Navigation and Outlet (for nested routes). It also handles Flutter integration awareness by setting localStorage flags. | . | Navigation.jsx: . | Purpose: Renders the sidebar navigation links for the dashboard. | Functionality: Displays links for ‘Dashboard’, ‘Memos’, ‘Users’, ‘Roles’, ‘Blocks’, ‘Hierarchies’, ‘Shifts’, and ‘Settings’. The visibility of ‘Users’, ‘Roles’, ‘Blocks’, ‘Hierarchies’, and ‘Shifts’ is conditional based on isSuperuser or isStaff roles. It highlights the active tab and provides a mechanism to close the mobile sidebar on navigation item click. | . | . | src/components/forms/ . | These components are specific forms for creating or editing various entities within the application. They typically use the useForm hook for input management and validation, and FormField for rendering individual input elements. | ApproverHierarchyForm.jsx: Manages the creation and editing of approver hierarchies, including is_active status and multiple approval levels with roles and priorities. | BlockForm.jsx: Form for creating or editing a block, including name, number of floors, and description. | RoleForm.jsx: Form for creating or editing user roles, specifying name, description, and permissions (can approve, respond, create memos). | ShiftForm.jsx: Form for creating or editing shifts, including name, start time, end time, and description. | UserForm.jsx: Form for creating or editing user accounts, including institution ID, role, and phone number. It dynamically fetches available roles from the API for selection. | . | src/components/memos/ . | BackButton.jsx: . | Purpose: A reusable “Back” button component that navigates to the previous page in history or a fallback route if no history is available. | . | MemoDetail.jsx: . | Purpose: Displays detailed information about a specific memo, including its latest snapshot, hierarchy, and worker status. | Functionality: Fetches memo data using memoId from URL parameters. It conditionally displays “Edit” button for creators and integrates MemoInfo, MemoTimeline, and WorkerStatus components. | . | MemoEditForm.jsx: . | Purpose: Form for updating an existing memo, allowing changes to complaint, department, and tagged role. | Functionality: Fetches roles for the “Tagged Role” dropdown and sends a PATCH request to the API to update the memo’s payload. | . | MemoForm.jsx: . | Purpose: Form for creating a new memo. | Functionality: Guides the user through confirming/changing their current ward, then allows input for complaint, department, and tagging a role. It generates a UUID for the memo and uses apiService.createMemo to submit. It also interacts with useFlutter to update user info in the Flutter app if embedded. | . | MemoInfo.jsx: . | Purpose: Displays general information about a memo from its latest snapshot, grouped into “Request Info” and “User Info” sections. | Functionality: Renders memo details, including complaint, department, tagged role, user role, phone number, block, ward, and floor. It also includes functionality for refreshing OTPs (Attendee and Completion OTPs) for relevant user roles. | . | MemosPage.jsx: . | Purpose: Displays a list of memos, categorised by user role (creator, approver, responder, admin). | Functionality: Fetches memos using apiService.getUserMemos. It provides a “Create” button for creators and navigates to MemoDetail on memo click. It shows a count of active memos and handles loading/error states. It uses MemoTabbedList for display and MemoForm for creation. | . | MemoTimeline.jsx: . | Purpose: Displays the approval timeline/hierarchy for a memo and allows users to approve or reject steps. | Functionality: Renders each step of the approval hierarchy, indicating its status (approved/pending). It provides “Approve” and “Undo Approval” buttons conditionally based on the current user’s role (currentUserRole, isCurrentUserSuperuser) and whether they previously approved the step. | . | PhoneLink.jsx: . | Purpose: Renders a clickable phone number that attempts to initiate a call. | Functionality: Dynamically enables/disables the link based on whether the app is running in a Flutter WebView and the Flutter app’s version (flutter_version) to ensure proper phone call handling within the mobile environment. | . | WorkerStatus.jsx: . | Purpose: Displays and allows adding/deleting worker status updates (comments) for a memo, including speech-to-text functionality. | Functionality: Processes raw status data to display it with threading (replies). It provides a modal for adding new updates, which can include comments, status type (attended, completed, incomplete, tagged), tagged roles, and OTP validation for specific status types (e.g., completed, first-time comments). It integrates with the Flutter app for speech-to-text capabilities, sending speech commands and receiving results. | . | . | src/components/modals/ . | ConfirmDialog.jsx: . | Purpose: A generic modal component for displaying confirmation messages before executing a potentially destructive action (e.g., deletion). | Functionality: Takes title, message, confirm/cancel text, and loading state as props. | . | . | src/components/prototype/ . | MemoExplorer.jsx: . | Purpose: An experimental UI component for exploring memo lists with client-side search and filtering. | Functionality: Organises memos by roles and tabs, offering dynamic filtering options for wards and departments, and a search bar for complaints. Built with Mantine components. | . | MemoExplorerTW.jsx: . | Purpose: A Tailwind CSS-only version of MemoExplorer for exploring memo lists, offering the same filtering capabilities without Mantine dependencies. | Functionality: Provides role and tab selectors, search, and filters for ward and department. | . | MemoTabbedList.jsx: . | Purpose: Displays memos in a tabbed list format, allowing users to filter and search for memos within different categories. | Functionality: Organises memos into tabs (e.g., “All”), provides advanced filtering options by complaint, ward, block, floor, department, and date, and supports searching. | . | . | src/components/ui/ . | Checkbox.jsx: A reusable checkbox input component with a label. | FormField.jsx: A versatile component for rendering various input types (text, select, textarea, time) with integrated labels, error display, and required indicators. | Modal.jsx: A generic modal component for displaying content in a pop-up window, supporting different sizes. | . | src/components/wards/ . | WardManager.jsx: . | Purpose: Manages wards associated with a particular block. | Functionality: Fetches and displays wards for a given blockId. Allows adding new wards (with name and floor) and deleting existing ones. Wards are grouped and sortable by floor, with an expand/collapse feature. | . | . | . src/contexts/ Directory . Contains React Contexts for global state management. | AuthContext.js . | Purpose: Provides global access to authentication-related data and functions throughout the application. | Functionality: Manages user, hospital, authToken, and loading states. It offers methods like login, logout, updateAuth, and setPasswordfunc. It also exposes derived states such as isAuthenticated, isSuperuser, isApprover, isResponder, isCreator, and isRaiser. | Usage: The useAuth hook is used to consume this context. | . | FlutterContext.jsx . | Purpose: Provides a mechanism for the React app to communicate with its Flutter host when embedded within a WebView. | Functionality: Offers methods like sendToFlutter, updateUserInFlutter, and showFlutterMessage, which send messages to the Flutter ReactToFlutter JavaScript channel. | . | . src/hooks/ Directory . Contains custom React hooks for reusable logic. | useAuth.js . | Purpose: A custom hook that simplifies access to the AuthContext data and functions. | Usage: Ensures that the useAuth hook is called within an AuthProvider. | . | useCrud.jsx . | Purpose: A generic custom hook for abstracting common Create, Read, Update, and Delete (CRUD) operations for different entities. | Functionality: Takes an entityType (e.g., ‘users’, ‘roles’) and provides data, loading, error, fetchData, createItem, updateItem, and deleteItem functions, leveraging apiService from useAuth. | . | useForm.jsx . | Purpose: A custom hook for managing form state, input changes, blur events, and validation based on a provided schema. | Functionality: Provides values, errors, touched, handleChange, handleBlur, validate, reset, and setValues for streamlined form handling. It includes specific casting for role selection to integer. | . | . src/services/ Directory . Contains services for interacting with external APIs. | api.js (ApiService) . | Purpose: A centralized class that handles all interactions with the Django REST Framework backend API. | Key Functionality: . | Base URL Management: Configures the baseURL for API requests, defaulting to https://app.memotrack.net/ or using process.env.BACKEND_URL. | Request Handling: The request method supports GET, POST, PATCH, and DELETE HTTP methods, and automatically attaches the Authorization header with the JWT token retrieved from localStorage. | Specific Endpoints: Provides methods for various API interactions, including login, logout, setPassword, getHospital, getUsers, createUser, updateUser, deleteUser, and similar operations for roles, blocks, shifts, approver hierarchies, memos, worker statuses, and wards. It also includes refreshOTP. | . | . | . src/utils/ Directory . Contains general utility functions and constants. | constants.js . | Purpose: Stores constants such as API endpoints and local storage keys for easy management and consistency across the application. | Details: Defines API_ENDPOINTS (e.g., HOSPITALS, TOKEN_AUTH, USERS), USER_ROLES (e.g., SUPERUSER, APPROVER, RESPONDER, RAISER), and LOCAL_STORAGE_KEYS (authToken, user, selectedHospital). | . | . ",
    "url": "/react-webview-frontend-docs.html",
    
    "relUrl": "/react-webview-frontend-docs.html"
  }
}
